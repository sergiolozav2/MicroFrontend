/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminViajesImport } from './routes/admin/viajes'
import { Route as AdminMetricsImport } from './routes/admin/metrics'
import { Route as AdminHomeImport } from './routes/admin/home'
import { Route as AdminEventsImport } from './routes/admin/events'
import { Route as AdminVehiclesIndexImport } from './routes/admin/vehicles/index'
import { Route as AdminLineaIndexImport } from './routes/admin/linea/index'
import { Route as AdminConductorIndexImport } from './routes/admin/conductor/index'
import { Route as AdminVehiclesCrearImport } from './routes/admin/vehicles/crear'
import { Route as AdminLineaCrearImport } from './routes/admin/linea/crear'
import { Route as AdminConductorCrearImport } from './routes/admin/conductor/crear'
import { Route as AdminLineaEditarLineaTransporteIDImport } from './routes/admin/linea/editar.$lineaTransporteID'

// Create Virtual Routes

const PublicLazyImport = createFileRoute('/_public')()
const AuthLazyImport = createFileRoute('/_auth')()
const IndexLazyImport = createFileRoute('/')()
const PublicMapLazyImport = createFileRoute('/_public/map')()
const AuthRegisterLazyImport = createFileRoute('/_auth/register')()
const AuthLoginLazyImport = createFileRoute('/_auth/login')()

// Create/Update Routes

const PublicLazyRoute = PublicLazyImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_public.lazy').then((d) => d.Route))

const AuthLazyRoute = AuthLazyImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_auth.lazy').then((d) => d.Route))

const AdminRouteRoute = AdminRouteImport.update({
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AdminIndexRoute = AdminIndexImport.update({
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const PublicMapLazyRoute = PublicMapLazyImport.update({
  path: '/map',
  getParentRoute: () => PublicLazyRoute,
} as any).lazy(() => import('./routes/_public.map.lazy').then((d) => d.Route))

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => AuthLazyRoute,
} as any).lazy(() =>
  import('./routes/_auth.register.lazy').then((d) => d.Route),
)

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  path: '/login',
  getParentRoute: () => AuthLazyRoute,
} as any).lazy(() => import('./routes/_auth.login.lazy').then((d) => d.Route))

const AdminViajesRoute = AdminViajesImport.update({
  path: '/viajes',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminMetricsRoute = AdminMetricsImport.update({
  path: '/metrics',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminHomeRoute = AdminHomeImport.update({
  path: '/home',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminEventsRoute = AdminEventsImport.update({
  path: '/events',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminVehiclesIndexRoute = AdminVehiclesIndexImport.update({
  path: '/vehicles/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminLineaIndexRoute = AdminLineaIndexImport.update({
  path: '/linea/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminConductorIndexRoute = AdminConductorIndexImport.update({
  path: '/conductor/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminVehiclesCrearRoute = AdminVehiclesCrearImport.update({
  path: '/vehicles/crear',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminLineaCrearRoute = AdminLineaCrearImport.update({
  path: '/linea/crear',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminConductorCrearRoute = AdminConductorCrearImport.update({
  path: '/conductor/crear',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminLineaEditarLineaTransporteIDRoute =
  AdminLineaEditarLineaTransporteIDImport.update({
    path: '/linea/editar/$lineaTransporteID',
    getParentRoute: () => AdminRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      preLoaderRoute: typeof AuthLazyImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      preLoaderRoute: typeof PublicLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/events': {
      preLoaderRoute: typeof AdminEventsImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/home': {
      preLoaderRoute: typeof AdminHomeImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/metrics': {
      preLoaderRoute: typeof AdminMetricsImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/viajes': {
      preLoaderRoute: typeof AdminViajesImport
      parentRoute: typeof AdminRouteImport
    }
    '/_auth/login': {
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof AuthLazyImport
    }
    '/_auth/register': {
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof AuthLazyImport
    }
    '/_public/map': {
      preLoaderRoute: typeof PublicMapLazyImport
      parentRoute: typeof PublicLazyImport
    }
    '/admin/': {
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/conductor/crear': {
      preLoaderRoute: typeof AdminConductorCrearImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/linea/crear': {
      preLoaderRoute: typeof AdminLineaCrearImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/vehicles/crear': {
      preLoaderRoute: typeof AdminVehiclesCrearImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/conductor/': {
      preLoaderRoute: typeof AdminConductorIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/linea/': {
      preLoaderRoute: typeof AdminLineaIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/vehicles/': {
      preLoaderRoute: typeof AdminVehiclesIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/linea/editar/$lineaTransporteID': {
      preLoaderRoute: typeof AdminLineaEditarLineaTransporteIDImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  AdminRouteRoute.addChildren([
    AdminEventsRoute,
    AdminHomeRoute,
    AdminMetricsRoute,
    AdminViajesRoute,
    AdminIndexRoute,
    AdminConductorCrearRoute,
    AdminLineaCrearRoute,
    AdminVehiclesCrearRoute,
    AdminConductorIndexRoute,
    AdminLineaIndexRoute,
    AdminVehiclesIndexRoute,
    AdminLineaEditarLineaTransporteIDRoute,
  ]),
  AuthLazyRoute.addChildren([AuthLoginLazyRoute, AuthRegisterLazyRoute]),
  PublicLazyRoute.addChildren([PublicMapLazyRoute]),
])

/* prettier-ignore-end */
